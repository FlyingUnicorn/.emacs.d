

* GENERAL EMACS SETTINGS
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
;(toggle-scroll-bar -1)
(setq inhibit-startup-screen t)
(setq ring-bell-function 'ignore)
(defalias 'yes-or-no-p 'y-or-n-p)

;(load-theme 'alect-dark t)
(load-theme 'kaolin-aurora)

;; scroll line-by-line when going outside selected buffer
(setq scroll-conservatively 100)

;; Add formatted line numbers
(global-linum-mode t)
;(global-display-line-numbers-mode t)
(setq linum-format "%4d ")

;; Highlight selcted row
(global-hl-line-mode 1)

;; It lets you move point from window to window using Shift and the arrow keys. 
(windmove-default-keybindings)

;; Always update buffers
(global-auto-revert-mode t)

#+END_SRC

* KEY BINDINGS
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-k") 'kill-whole-line)
(global-set-key (kbd "C-z") 'ansi-term)
(global-set-key (kbd "C-x C-x") 'kill-this-buffer)
(global-set-key (kbd "C-q") 'backward-delete-char)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; select and edit all matches at the same time
(global-set-key (kbd "C-c ;") 'iedit-mode)
#+END_SRC

* DEVELOPMENT SETTINGS
#+BEGIN_SRC emacs-lisp
;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 2 spaces
(setq-default  tab-width 4)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook
  (lambda () (interactive)
    (setq show-trailing-whitespace 1)))

(setq
 gdb-many-windows t
 gdb-show-main t
)

(setq
 c-default-style "bsd"
 c-basic-offset 4
)

;; show function mane in lower status bar
(which-function-mode 1)
#+END_SRC

* PACKAGES 
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :init
  (progn
    (require 'helm-config)
    (require 'helm-grep)
    ;; To fix error at compile:
    ;; Error (bytecomp): Forgot to expand macro with-helm-buffer in
    ;; (with-helm-buffer helm-echo-input-in-header-line)
    (if (version< "26.0.50" emacs-version)
        (eval-when-compile (require 'helm-lib)))

    (defun helm-hide-minibuffer-maybe ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                  `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

    (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
    (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
    (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-google-suggest-use-curl-p t
          helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          ;; helm-quick-update t ; do not display invisible candidates
          helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

          ;; you can customize helm-do-grep to execute ack-grep
          ;; helm-grep-default-command "ack-grep -Hn --smart-case --no-group --no-color %e %p %f"
          ;; helm-grep-default-recurse-command "ack-grep -H --smart-case --no-group --no-color %e %p %f"

          ; test remove
          ;;helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window

          helm-echo-input-in-header-line t

          ;; helm-candidate-number-limit 500 ; limit the number of displayed canidates
          helm-ff-file-name-history-use-recentf t
          helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
          helm-buffer-skip-remote-checking t

          helm-mode-fuzzy-match t

          helm-buffers-fuzzy-matching t ; fuzzy matching buffer names when non-nil
                                        ; useful in helm-mini that lists buffers
          helm-org-headings-fontify t
          ;; helm-find-files-sort-directories t
          ;; ido-use-virtual-buffers t
          helm-semantic-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-lisp-fuzzy-completion t
          ;; helm-apropos-fuzzy-match t
          helm-buffer-skip-remote-checking t
          helm-locate-fuzzy-match t
          helm-display-header-line nil
          helm-recentf-fuzzy-match t
          helm-buffer-max-length nil)

    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-c r") 'helm-recentf)
    (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
    (global-set-key (kbd "C-c o") 'helm-occur)

    (global-set-key (kbd "C-c h w") 'helm-wikipedia-suggest)
    (global-set-key (kbd "C-c h g") 'helm-google-suggest)

    (global-set-key (kbd "C-c h x") 'helm-register)
    ;; (global-set-key (kbd "C-x r j") 'jump-to-register)

    (define-key 'help-command (kbd "C-f") 'helm-apropos)
    (define-key 'help-command (kbd "r") 'helm-info-emacs)
    (define-key 'help-command (kbd "C-l") 'helm-locate-library)

    ;; use helm to list eshell history
    (add-hook 'eshell-mode-hook
              #'(lambda ()
                  (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))

;;; Save current position to mark ring
    (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

    ;; show minibuffer history with Helm
    (define-key minibuffer-local-map (kbd "M-p") 'helm-minibuffer-history)
    (define-key minibuffer-local-map (kbd "M-n") 'helm-minibuffer-history)

    (define-key global-map [remap find-tag] 'helm-etags-select)

    (define-key global-map [remap list-buffers] 'helm-buffers-list)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; PACKAGE: helm-swoop                ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Locate the helm-swoop folder to your path
    (use-package helm-swoop
      :bind (("C-c h o" . helm-swoop)
             ("C-c s" . helm-multi-swoop-all))
      :config
      ;; When doing isearch, hand the word over to helm-swoop
      (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

      ;; From helm-swoop to helm-multi-swoop-all
      (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

      ;; Save buffer when helm-multi-swoop-edit complete
      (setq helm-multi-swoop-edit-save t)

      ;; If this value is t, split window inside the current window
      (setq helm-swoop-split-with-multiple-windows t)

      ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
      (setq helm-swoop-split-direction 'split-window-vertically)

      ;; If nil, you can slightly boost invoke speed in exchange for text color
      (setq helm-swoop-speed-or-color t))

    (helm-mode 1)

    (use-package helm-projectile
      :init
      (helm-projectile-on)
      (setq projectile-completion-system 'helm)
      (setq projectile-indexing-method 'alien))))



;; Enable helm-gtags-mode
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;; Set key bindings
(eval-after-load "helm-gtags"
  '(progn
     (define-key helm-gtags-mode-map (kbd "C-c C-t") 'helm-gtags-find-tag)
     ;(define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
     (define-key helm-gtags-mode-map (kbd "C-c C-s") 'helm-gtags-find-symbol)
     (define-key helm-gtags-mode-map (kbd "C-c C-y") 'helm-gtags-parse-file)
     (define-key helm-gtags-mode-map (kbd "C-c C-f") 'helm-gtags-find-files)
     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history) ; fix below
     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
     ;(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
    ))

(provide 'setup-helm)

#+END_SRC
** Speedbar
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
  :ensure t
  :bind ("C-c C-SPC" . sr-speedbar-toggle)
  :config
    (setq speedbar-directory-unshown-regexp "^\\(CSV\\|RCS\\|SCCS\\|\\.\\.*$\\)\\'")
    (setq speedbar-show-unknown-files t)
    (setq speedbar-use-images nil)
    (setq sr-speedbar-right-side nil)
    (setq sr-speedbar-width-x 40))
#+END_SRC
   
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-j" . avy-goto-char-timer)
        ("M-g" . avy-goto-line))
#+END_SRC

** Hlinum
Highlights line number
#+BEGIN_SRC emacs-lisp
(use-package hlinum
  :ensure t
  :config 
    (hlinum-activate))
#+END_SRC

** Persistent scratch
#+BEGIN_SRC emacs-lisp
(use-package persistent-scratch
  :ensure t
  :config
    (persistent-scratch-setup-default)
    (persistent-scratch-autosave-mode 1))
#+END_SRC

** Zygospore
#+BEGIN_SRC emacs-lisp
(use-package zygospore
  :ensure t
  :bind ("C-x 1" . zygospore-toggle-delete-other-windows)
        ("RET" .   newline-and-indent))
    

;;(use-package zygospore
;;  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
;;         ("RET" .   newline-and-indent))) ; automatically indent when press RET

#+END_SRC

** GGTAGS
#+BEGIN_SRC emacs-lisp
(require 'ggtags)

(ggtags-mode 1)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(dolist (map (list ggtags-mode-map))
  ;(define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key map (kbd "C-c C-g") 'ggtags-grep)
  ;(define-key map (kbd "C-c C-s") 'ggtags-find-other-symbbol)
  ;(define-key map (kbd "C-c C-t") 'ggtags-find-tag-dwim)

  ;(define-key map (kbd "C-c g r") 'ggtags-find-reference)
  ;(define-key map (kbd "C-c g f") 'ggtags-find-file)
  ;(define-key map (kbd "C-c g c") 'ggtags-create-tags)
  ;(define-key map (kbd "C-c g u") 'ggtags-update-tags)
  ;(define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
  (define-key map (kbd "M-,") 'pop-tag-mark)
  ;; (define-key map (kbd "") 'ggtags-prev-mark)
  ;; (define-key map (kbd "") 'ggtags-next-mark)
  )

(provide 'setup-ggtags)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(require 'format-spec)
(require 'projectile)
(setq projectile-require-project-root nil)
(setq projectile-enable-caching t)
(setq projectile-globally-ignored-file-suffixes
      (append '(
                "ninja"
                "elf"
                )
              projectile-globally-ignored-file-suffixes))
(setq projectile-globally-ignored-files
      (append '(
                ;"GTAGS"
                ;"GRTAGS"
                ;"GPATH"
                )
              projectile-globally-ignored-files))

(projectile-global-mode)
#+END_SRC
** RTAGS
#+BEGIN_SRC emace-lisp
;; ensure that we use only rtags checking
;; https://github.com/Andersbakken/rtags#optional-1
(defun setup-flycheck-rtags ()
  (interactive)
  (flycheck-select-checker 'rtags)
  ;; RTags creates more accurate overlays.
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil))

;; only run this if rtags is installed
(when (require 'rtags nil :noerror)
  ;; make sure you have company-mode installed
  (require 'company)

  ;; disable prelude's use of C-c r, as this is the rtags keyboard prefix
  ;(define-key prelude-mode-map (kbd "C-c r") nil)
  ;; install standard rtags keybindings. Do M-. on the symbol below to
  ;; jump to definition and see the keybindings.
  (rtags-enable-standard-keybindings)

  (setq rtags-display-result-backend 'helm)
  ;; comment this out if you don't have or don't use helm
  (setq rtags-use-helm t)
  ;; company completion setup
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
  (setq rtags-completions-enabled t)
  (push 'company-rtags company-backends)
  (global-company-mode)
  (define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
  (define-key c-mode-base-map (kbd "M-.") (function rtags-find-symbol-at-point))
  (define-key c-mode-base-map (kbd "M-,") (function rtags-find-references-at-point))
  (define-key c-mode-base-map (kbd "M-[") (function rtags-location-stack-back))
  (define-key c-mode-base-map (kbd "M-]") (function rtags-location-stack-forward))
  (define-key c-mode-base-map (kbd "C-c C-f") (function rtags-find-file))
  
  ;; use rtags flycheck mode -- clang warnings shown inline
  (require 'flycheck-rtags)
  ;; c-mode-common-hook is also called by c++-mode
  (add-hook 'c-mode-common-hook #'setup-flycheck-rtags))
#+END_SRC
* FUNCTIONS
** Duplicate line
#+BEGIN_SRC emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  )
(global-set-key (kbd "C-c d") 'duplicate-line)
#+END_SRC

** Split Buffer Vertically/Horizontally and move
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Comment/Uncomment line
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-line-or-region ()
  "Comment or uncomment the current line or region"
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    )
  )
(global-set-key (kbd "C-;") 'comment-or-uncomment-line-or-region)
#+END_SRC

** Open respective Src/Hdr file
#+BEGIN_SRC emacs-lisp
(defun open-this-hdr-src()
  "Open this files header or source file."
  (interactive)
  (setq target_filename (shell-command-to-string (format "python3 ~/.emacs.d/scripts/getSrcHdr.py %s" buffer-file-name)))
  (if (> (length target_filename) 0)
    (if (file-exists-p target_filename)
      (progn  
        (message "found >>> %s" target_filename)
        (find-file target_filename)))
    (message "open-this-hdr-src - not valid file extention.")))
(global-set-key (kbd "C-c C-j") 'open-this-hdr-src)
#+END_SRC
 












